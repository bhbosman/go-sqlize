package test

import (
	"github.com/bhbosman/go-sqlize/cmd"
	"github.com/stretchr/testify/require"
	"os"
	"strings"
	"testing"
)

func TestName(t *testing.T) {

	ss := []struct {
		testName string
		setout   bool
		fileName string
		result   string
	}{
		{"if test 01", true, "./work/ifStatement001.go", "select\n\t[T1].[Name] as Name,\n\t[T1].[SurName] as SurName,\n\tcase\n\t\twhen ([T1].[Active] <> true) then\n\t\t\t'activeX'\n\t\telse\n\t\t\t'dddd'\n\tend as Status1,\n\tcase\n\t\twhen ([T1].[Active] <> true) then\n\t\t\t'activeY'\n\t\telse\n\t\t\t'eeeeee'\n\tend as Status2,\n\tcase\n\t\twhen ([T1].[Points] < 100) then\n\t\t\t'Value 01'\n\t\twhen ([T1].[Points] > 1000) then\n\t\t\t'Value 02'\n\t\twhen (([T1].[Points] >= 100) AND ([T1].[Points] < 1000)) then\n\t\t\tcase\n\t\t\t\twhen (([T1].[Active] AND ([T1].[Points] >= 100)) AND ([T1].[Points] < 1000)) then\n\t\t\t\t\tcase\n\t\t\t\t\t\twhen ([T1].[Active] OR (([T1].[Points] >= 100) AND ([T1].[Points] < 1000))) then\n\t\t\t\t\t\t\t'122'\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\t'122233'\n\t\t\t\t\tend\n\t\t\t\telse\n\t\t\t\t\t'Value 03'\n\t\t\tend\n\t\twhen (([T1].[Points] >= 1000) AND ([T1].[Points] < 1000)) then\n\t\t\t'Value 04'\n\t\twhen (([T1].[Points] >= 100) AND ([T1].[Points] < 1000)) then\n\t\t\t'Value 05'\n\t\twhen (([T1].[Points] >= 100) AND ([T1].[Points] < 1000)) then\n\t\t\t'Value 06'\n\t\twhen (([T1].[Points] >= 100) AND ([T1].[Points] < 1000)) then\n\t\t\t'Value 07'\n\t\twhen (([T1].[Points] >= 100) AND ([T1].[Points] < 1000)) then\n\t\t\t'Value 08'\n\t\twhen (([T1].[Points] >= 100) AND ([T1].[Points] < 1000)) then\n\t\t\t'Value 09'\n\t\telse\n\t\t\t'Value 10'\n\tend as Level1,\n\tcase\n\t\twhen ([T1].[Points] < 100) then\n\t\t\t'Value 01'\n\t\twhen ([T1].[Points] > 1000) then\n\t\t\t'Value 02'\n\t\twhen (([T1].[Points] >= 100) AND ([T1].[Points] < 1000)) then\n\t\t\tcase\n\t\t\t\twhen (([T1].[Active] AND ([T1].[Points] >= 100)) AND ([T1].[Points] < 1000)) then\n\t\t\t\t\tcase\n\t\t\t\t\t\twhen ([T1].[Active] OR (([T1].[Points] >= 100) AND ([T1].[Points] < 1000))) then\n\t\t\t\t\t\t\t'122'\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\t'122233'\n\t\t\t\t\tend\n\t\t\t\telse\n\t\t\t\t\t'Value 03'\n\t\t\tend\n\t\twhen (([T1].[Points] >= 1000) AND ([T1].[Points] < 1000)) then\n\t\t\t'Value 04'\n\t\twhen (([T1].[Points] >= 100) AND ([T1].[Points] < 1000)) then\n\t\t\t'Value 05'\n\t\twhen (([T1].[Points] >= 100) AND ([T1].[Points] < 1000)) then\n\t\t\t'Value 06'\n\t\twhen (([T1].[Points] >= 100) AND ([T1].[Points] < 1000)) then\n\t\t\t'Value 07'\n\t\twhen (([T1].[Points] >= 100) AND ([T1].[Points] < 1000)) then\n\t\t\t'Value 08'\n\t\twhen (([T1].[Points] >= 100) AND ([T1].[Points] < 1000)) then\n\t\t\t'Value 09'\n\t\telse\n\t\t\t'Value 10'\n\tend as Level2\nfrom\n\tstruct { Name string; SurName string; Active bool; Points int } [T1]\n"},
		{"if test 02", true, "./work/ifStatement002.go", "select\n\t[T1].[Name] as Name,\n\t[T1].[SurName] as SurName,\n\tcase\n\t\twhen ([T1].[Active] <> true) then\n\t\t\t'activeX'\n\t\telse\n\t\t\t'dddd'\n\tend as Status1,\n\tcase\n\t\twhen ([T1].[Active] <> true) then\n\t\t\t'activeY'\n\t\telse\n\t\t\t'eeeeee'\n\tend as Status2,\n\tcase\n\t\twhen [T1].[Active] then\n\t\t\t/* Some[string](assigned: false) */\n\t\t\tnil\n\t\telse\n\t\t\t/* Some[builtin.IfThenElseSingleValueCondition](assigned: true) */\n\t\t\tcase\n\t\t\t\twhen (((([T1].[Points01] is not null) AND ([T1].[Points02] is not null)) AND ([T1].[Points01] < 100)) AND ([T1].[Points02] < 200)) then\n\t\t\t\t\t'Value 01'\n\t\t\t\twhen (([T1].[Points01] is not null) AND ([T1].[Points01] > 1000)) then\n\t\t\t\t\t'Value 02'\n\t\t\t\twhen ((([T1].[Points01] is not null) AND ([T1].[Points01] >= 100)) AND ([T1].[Points01] < 1000)) then\n\t\t\t\t\tcase\n\t\t\t\t\t\twhen ((([T1].[Active] AND ([T1].[Points01] is not null)) AND ([T1].[Points01] >= 100)) AND ([T1].[Points01] < 1000)) then\n\t\t\t\t\t\t\tcase\n\t\t\t\t\t\t\t\twhen ([T1].[Active] OR ((([T1].[Points01] is not null) AND ([T1].[Points01] >= 100)) AND ([T1].[Points01] < 1000))) then\n\t\t\t\t\t\t\t\t\t'122'\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t'122233'\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\t'Value 03'\n\t\t\t\t\tend\n\t\t\t\twhen ((([T1].[Points01] is not null) AND ([T1].[Points01] >= 1000)) AND ([T1].[Points01] < 1000)) then\n\t\t\t\t\t'Value 04'\n\t\t\t\twhen ((([T1].[Points01] is not null) AND ([T1].[Points01] >= 100)) AND ([T1].[Points01] < 1000)) then\n\t\t\t\t\t'Value 05'\n\t\t\t\twhen ((([T1].[Points01] is not null) AND ([T1].[Points01] >= 100)) AND ([T1].[Points01] < 1000)) then\n\t\t\t\t\t'Value 06'\n\t\t\t\twhen ((([T1].[Points01] is not null) AND ([T1].[Points01] >= 100)) AND ([T1].[Points01] < 1000)) then\n\t\t\t\t\t'Value 07'\n\t\t\t\twhen ((([T1].[Points01] is not null) AND ([T1].[Points01] >= 100)) AND ([T1].[Points01] < 1000)) then\n\t\t\t\t\t'Value 08'\n\t\t\t\twhen ((([T1].[Points01] is not null) AND ([T1].[Points01] >= 100)) AND ([T1].[Points01] < 1000)) then\n\t\t\t\t\t'Value 09'\n\t\t\t\telse\n\t\t\t\t\t'Value 10'\n\t\t\tend\n\tend as Level1,\n\tcase\n\t\twhen (((([T1].[Points01] is not null) AND ([T1].[Points02] is not null)) AND ([T1].[Points01] < 100)) AND ([T1].[Points02] < 200)) then\n\t\t\t'Value 01'\n\t\twhen (([T1].[Points01] is not null) AND ([T1].[Points01] > 1000)) then\n\t\t\t'Value 02'\n\t\twhen ((([T1].[Points01] is not null) AND ([T1].[Points01] >= 100)) AND ([T1].[Points01] < 1000)) then\n\t\t\tcase\n\t\t\t\twhen ((([T1].[Active] AND ([T1].[Points01] is not null)) AND ([T1].[Points01] >= 100)) AND ([T1].[Points01] < 1000)) then\n\t\t\t\t\tcase\n\t\t\t\t\t\twhen ([T1].[Active] OR ((([T1].[Points01] is not null) AND ([T1].[Points01] >= 100)) AND ([T1].[Points01] < 1000))) then\n\t\t\t\t\t\t\t'122'\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\t'122233'\n\t\t\t\t\tend\n\t\t\t\telse\n\t\t\t\t\t'Value 03'\n\t\t\tend\n\t\twhen ((([T1].[Points01] is not null) AND ([T1].[Points01] >= 1000)) AND ([T1].[Points01] < 1000)) then\n\t\t\t'Value 04'\n\t\twhen ((([T1].[Points01] is not null) AND ([T1].[Points01] >= 100)) AND ([T1].[Points01] < 1000)) then\n\t\t\t'Value 05'\n\t\twhen ((([T1].[Points01] is not null) AND ([T1].[Points01] >= 100)) AND ([T1].[Points01] < 1000)) then\n\t\t\t'Value 06'\n\t\twhen ((([T1].[Points01] is not null) AND ([T1].[Points01] >= 100)) AND ([T1].[Points01] < 1000)) then\n\t\t\t'Value 07'\n\t\twhen ((([T1].[Points01] is not null) AND ([T1].[Points01] >= 100)) AND ([T1].[Points01] < 1000)) then\n\t\t\t'Value 08'\n\t\twhen ((([T1].[Points01] is not null) AND ([T1].[Points01] >= 100)) AND ([T1].[Points01] < 1000)) then\n\t\t\t'Value 09'\n\t\telse\n\t\t\t'Value 10'\n\tend as Level2,\n\t/* Some[string](assigned: false) */\n\tnil as Level3\nfrom\n\tstruct { Name string; SurName string; Active bool; Points01 struct { Assigned bool \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\"; Value int \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\" }; Points02 struct { Assigned bool \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\"; Value int \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\" }; Points03 struct { Assigned bool \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\"; Value int \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\" }; Points04 struct { Assigned bool \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\"; Value int \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\" } } [T1]\n"},
		{"if test 03", true, "./work/ifStatement003.go", "select\n\tcase\n\t\twhen ([T1].[Active] <> true) then\n\t\t\t'activeY'\n\t\telse\n\t\t\t'eeeeee'\n\tend as Status2,\nfrom\n\tstruct { Name string; SurName string; Active bool; Points01 struct { Assigned bool \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\"; Value int \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\" }; Points02 struct { Assigned bool \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\"; Value int \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\" }; Points03 struct { Assigned bool \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\"; Value int \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\" }; Points04 struct { Assigned bool \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\"; Value int \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\" } } [T1]\n"},
		{"switch test 01", true, "./work/switchStmt001.go", "select\n\t'' as Name,\n\t'' as SurName,\n\t'' as Status1,\n\t'' as Status2,\n\tcase\n\t\twhen (([T1].[Points01] is not null) AND ([T1].[Points02] is not null) AND ([T1].[Points03] is not null) AND ([T1].[Points04] is not null)) then\n\t\t\tcase\n\t\t\t\twhen (([T1].[Points01] = 0) OR ([T1].[Points01] = 323) OR ([T1].[Points01] = 45345) OR ([T1].[Points01] = 4534234) OR ([T1].[Points01] = -34)) then\n\t\t\t\t\t/* Some[builtin.coercion](assigned: true) */\n\t\t\t\t\tCAST((((([T1].[Points01] + [T1].[Points02]) + [T1].[Points03]) + [T1].[Points04]) + 4) as varchar)\n\t\t\t\twhen (([T1].[Points01] = 1)) then\n\t\t\t\t\t/* Some[builtin.coercion](assigned: true) */\n\t\t\t\t\tCAST((((([T1].[Points01] + [T1].[Points02]) + [T1].[Points03]) + [T1].[Points04]) + 7) as varchar)\n\t\t\t\twhen (([T1].[Points01] = 2)) then\n\t\t\t\t\t/* Some[builtin.coercion](assigned: true) */\n\t\t\t\t\tCAST((((([T1].[Points01] + [T1].[Points02]) + [T1].[Points03]) + [T1].[Points04]) + 10) as varchar)\n\t\t\t\telse\n\t\t\t\t\t/* Some[builtin.coercion](assigned: true) */\n\t\t\t\t\tCAST((((([T1].[Points01] + [T1].[Points02]) + [T1].[Points03]) + [T1].[Points04]) + 1) as varchar)\n\t\t\tend\n\t\twhen (([T1].[Points01] is not null) AND ([T1].[Points02] is not null) AND ([T1].[Points03] is not null)) then\n\t\t\t/* Some[builtin.coercion](assigned: true) */\n\t\t\tCAST((([T1].[Points01] + [T1].[Points02]) + [T1].[Points03]) as varchar)\n\t\twhen (([T1].[Points01] is not null) AND ([T1].[Points02] is not null)) then\n\t\t\t/* Some[builtin.coercion](assigned: true) */\n\t\t\tCAST(([T1].[Points01] + [T1].[Points02]) as varchar)\n\t\twhen (([T1].[Points01] is not null)) then\n\t\t\t/* Some[builtin.coercion](assigned: true) */\n\t\t\tCAST([T1].[Points01] as varchar)\n\t\telse\n\t\t\t/* Some[string](assigned: true) */\n\t\t\t'ABC'\n\tend as Level1,\n\tcase\n\t\twhen (([T1].[Points01] is not null) AND ([T1].[Points02] is not null) AND ([T1].[Points03] is not null) AND ([T1].[Points04] is not null)) then\n\t\t\tcase\n\t\t\t\twhen (([T1].[Points01] = 0) OR ([T1].[Points01] = 323) OR ([T1].[Points01] = 45345) OR ([T1].[Points01] = 4534234) OR ([T1].[Points01] = -34)) then\n\t\t\t\t\tCAST((((([T1].[Points01] + [T1].[Points02]) + [T1].[Points03]) + [T1].[Points04]) + 5) as varchar)\n\t\t\t\twhen (([T1].[Points01] = 1)) then\n\t\t\t\t\tCAST((((([T1].[Points01] + [T1].[Points02]) + [T1].[Points03]) + [T1].[Points04]) + 8) as varchar)\n\t\t\t\twhen (([T1].[Points01] = 2)) then\n\t\t\t\t\tCAST((((([T1].[Points01] + [T1].[Points02]) + [T1].[Points03]) + [T1].[Points04]) + 11) as varchar)\n\t\t\t\telse\n\t\t\t\t\tCAST((((([T1].[Points01] + [T1].[Points02]) + [T1].[Points03]) + [T1].[Points04]) + 2) as varchar)\n\t\t\tend\n\t\twhen (([T1].[Points01] is not null) AND ([T1].[Points02] is not null) AND ([T1].[Points03] is not null)) then\n\t\t\tCAST((([T1].[Points01] + [T1].[Points02]) + [T1].[Points03]) as varchar)\n\t\twhen (([T1].[Points01] is not null) AND ([T1].[Points02] is not null)) then\n\t\t\tCAST(([T1].[Points01] + [T1].[Points02]) as varchar)\n\t\twhen (([T1].[Points01] is not null)) then\n\t\t\tCAST([T1].[Points01] as varchar)\n\t\telse\n\t\t\t'DEF'\n\tend as Level2,\n\tcase\n\t\twhen (([T1].[Points01] is not null) AND ([T1].[Points02] is not null) AND ([T1].[Points03] is not null) AND ([T1].[Points04] is not null)) then\n\t\t\tcase\n\t\t\t\twhen (([T1].[Points01] = 0) OR ([T1].[Points01] = 323) OR ([T1].[Points01] = 45345) OR ([T1].[Points01] = 4534234) OR ([T1].[Points01] = -34)) then\n\t\t\t\t\t/* Some[builtin.coercion](assigned: true) */\n\t\t\t\t\tCAST((((([T1].[Points01] + [T1].[Points02]) + [T1].[Points03]) + [T1].[Points04]) + 6) as varchar)\n\t\t\t\twhen (([T1].[Points01] = 1)) then\n\t\t\t\t\t/* Some[builtin.coercion](assigned: true) */\n\t\t\t\t\tCAST((((([T1].[Points01] + [T1].[Points02]) + [T1].[Points03]) + [T1].[Points04]) + 9) as varchar)\n\t\t\t\twhen (([T1].[Points01] = 2)) then\n\t\t\t\t\t/* Some[builtin.coercion](assigned: true) */\n\t\t\t\t\tCAST((((([T1].[Points01] + [T1].[Points02]) + [T1].[Points03]) + [T1].[Points04]) + 12) as varchar)\n\t\t\t\telse\n\t\t\t\t\t/* Some[builtin.coercion](assigned: true) */\n\t\t\t\t\tCAST((((([T1].[Points01] + [T1].[Points02]) + [T1].[Points03]) + [T1].[Points04]) + 3) as varchar)\n\t\t\tend\n\t\twhen (([T1].[Points01] is not null) AND ([T1].[Points02] is not null) AND ([T1].[Points03] is not null)) then\n\t\t\t/* Some[builtin.coercion](assigned: true) */\n\t\t\tCAST((([T1].[Points01] + [T1].[Points02]) + [T1].[Points03]) as varchar)\n\t\twhen (([T1].[Points01] is not null) AND ([T1].[Points02] is not null)) then\n\t\t\t/* Some[builtin.coercion](assigned: true) */\n\t\t\tCAST(([T1].[Points01] + [T1].[Points02]) as varchar)\n\t\twhen (([T1].[Points01] is not null)) then\n\t\t\t/* Some[builtin.coercion](assigned: true) */\n\t\t\tCAST([T1].[Points01] as varchar)\n\t\telse\n\t\t\t/* Some[string](assigned: true) */\n\t\t\t'GHI'\n\tend as Level3\nfrom\n\tstruct { Name string; SurName string; Active bool; Points01 struct { Assigned bool \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\"; Value int \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\" }; Points02 struct { Assigned bool \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\"; Value int \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\" }; Points03 struct { Assigned bool \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\"; Value int \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\" }; Points04 struct { Assigned bool \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\"; Value int \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\" } } [T1]\n"},
		{"switch test 02", true, "./work/switchStmt002.go", "select\n\t'' as Name,\n\t'' as SurName,\n\t'' as Status1,\n\t'' as Status2,\n\tcase\n\t\twhen (([T1].[Points01] is not null) AND ([T1].[Points02] is not null) AND ([T1].[Points03] is not null) AND ([T1].[Points04] is not null)) then\n\t\t\tcase\n\t\t\t\twhen ((((([T1].[Points01] = 0) OR ([T1].[Points01] = 323)) OR ([T1].[Points01] = 45345)) OR ([T1].[Points01] = 4534234)) OR ([T1].[Points01] = -34)) then\n\t\t\t\t\t/* Some[builtin.coercion](assigned: true) */\n\t\t\t\t\tCAST((((([T1].[Points01] + [T1].[Points02]) + [T1].[Points03]) + [T1].[Points04]) + 4) as varchar)\n\t\t\t\twhen ([T1].[Points04] = 1) then\n\t\t\t\t\t/* Some[builtin.coercion](assigned: true) */\n\t\t\t\t\tCAST((((([T1].[Points01] + [T1].[Points02]) + [T1].[Points03]) + [T1].[Points04]) + 7) as varchar)\n\t\t\t\twhen ([T1].[Points03] = 2) then\n\t\t\t\t\t/* Some[builtin.coercion](assigned: true) */\n\t\t\t\t\tCAST((((([T1].[Points01] + [T1].[Points02]) + [T1].[Points03]) + [T1].[Points04]) + 10) as varchar)\n\t\t\t\telse\n\t\t\t\t\t/* Some[builtin.coercion](assigned: true) */\n\t\t\t\t\tCAST((((([T1].[Points01] + [T1].[Points02]) + [T1].[Points03]) + [T1].[Points04]) + 1) as varchar)\n\t\t\tend\n\t\twhen (([T1].[Points01] is not null) AND ([T1].[Points02] is not null) AND ([T1].[Points03] is not null)) then\n\t\t\t/* Some[builtin.coercion](assigned: true) */\n\t\t\tCAST((([T1].[Points01] + [T1].[Points02]) + [T1].[Points03]) as varchar)\n\t\twhen (([T1].[Points01] is not null) AND ([T1].[Points02] is not null)) then\n\t\t\t/* Some[builtin.coercion](assigned: true) */\n\t\t\tCAST(([T1].[Points01] + [T1].[Points02]) as varchar)\n\t\twhen (([T1].[Points01] is not null)) then\n\t\t\t/* Some[builtin.coercion](assigned: true) */\n\t\t\tCAST([T1].[Points01] as varchar)\n\t\telse\n\t\t\t/* Some[string](assigned: true) */\n\t\t\t'ABC'\n\tend as Level1,\n\tcase\n\t\twhen (([T1].[Points01] is not null) AND ([T1].[Points02] is not null) AND ([T1].[Points03] is not null) AND ([T1].[Points04] is not null)) then\n\t\t\tcase\n\t\t\t\twhen ((((([T1].[Points01] = 0) OR ([T1].[Points01] = 323)) OR ([T1].[Points01] = 45345)) OR ([T1].[Points01] = 4534234)) OR ([T1].[Points01] = -34)) then\n\t\t\t\t\tCAST((((([T1].[Points01] + [T1].[Points02]) + [T1].[Points03]) + [T1].[Points04]) + 5) as varchar)\n\t\t\t\twhen ([T1].[Points04] = 1) then\n\t\t\t\t\tCAST((((([T1].[Points01] + [T1].[Points02]) + [T1].[Points03]) + [T1].[Points04]) + 8) as varchar)\n\t\t\t\twhen ([T1].[Points03] = 2) then\n\t\t\t\t\tCAST((((([T1].[Points01] + [T1].[Points02]) + [T1].[Points03]) + [T1].[Points04]) + 11) as varchar)\n\t\t\t\telse\n\t\t\t\t\tCAST((((([T1].[Points01] + [T1].[Points02]) + [T1].[Points03]) + [T1].[Points04]) + 2) as varchar)\n\t\t\tend\n\t\twhen (([T1].[Points01] is not null) AND ([T1].[Points02] is not null) AND ([T1].[Points03] is not null)) then\n\t\t\tCAST((([T1].[Points01] + [T1].[Points02]) + [T1].[Points03]) as varchar)\n\t\twhen (([T1].[Points01] is not null) AND ([T1].[Points02] is not null)) then\n\t\t\tCAST(([T1].[Points01] + [T1].[Points02]) as varchar)\n\t\twhen (([T1].[Points01] is not null)) then\n\t\t\tCAST([T1].[Points01] as varchar)\n\t\telse\n\t\t\t'DEF'\n\tend as Level2,\n\tcase\n\t\twhen (([T1].[Points01] is not null) AND ([T1].[Points02] is not null) AND ([T1].[Points03] is not null) AND ([T1].[Points04] is not null)) then\n\t\t\tcase\n\t\t\t\twhen ((((([T1].[Points01] = 0) OR ([T1].[Points01] = 323)) OR ([T1].[Points01] = 45345)) OR ([T1].[Points01] = 4534234)) OR ([T1].[Points01] = -34)) then\n\t\t\t\t\t/* Some[builtin.coercion](assigned: true) */\n\t\t\t\t\tCAST((((([T1].[Points01] + [T1].[Points02]) + [T1].[Points03]) + [T1].[Points04]) + 6) as varchar)\n\t\t\t\twhen ([T1].[Points04] = 1) then\n\t\t\t\t\t/* Some[builtin.coercion](assigned: true) */\n\t\t\t\t\tCAST((((([T1].[Points01] + [T1].[Points02]) + [T1].[Points03]) + [T1].[Points04]) + 9) as varchar)\n\t\t\t\twhen ([T1].[Points03] = 2) then\n\t\t\t\t\t/* Some[builtin.coercion](assigned: true) */\n\t\t\t\t\tCAST((((([T1].[Points01] + [T1].[Points02]) + [T1].[Points03]) + [T1].[Points04]) + 12) as varchar)\n\t\t\t\telse\n\t\t\t\t\t/* Some[builtin.coercion](assigned: true) */\n\t\t\t\t\tCAST((((([T1].[Points01] + [T1].[Points02]) + [T1].[Points03]) + [T1].[Points04]) + 3) as varchar)\n\t\t\tend\n\t\twhen (([T1].[Points01] is not null) AND ([T1].[Points02] is not null) AND ([T1].[Points03] is not null)) then\n\t\t\t/* Some[builtin.coercion](assigned: true) */\n\t\t\tCAST((([T1].[Points01] + [T1].[Points02]) + [T1].[Points03]) as varchar)\n\t\twhen (([T1].[Points01] is not null) AND ([T1].[Points02] is not null)) then\n\t\t\t/* Some[builtin.coercion](assigned: true) */\n\t\t\tCAST(([T1].[Points01] + [T1].[Points02]) as varchar)\n\t\twhen (([T1].[Points01] is not null)) then\n\t\t\t/* Some[builtin.coercion](assigned: true) */\n\t\t\tCAST([T1].[Points01] as varchar)\n\t\telse\n\t\t\t/* Some[string](assigned: true) */\n\t\t\t'GHI'\n\tend as Level3\nfrom\n\tstruct { Name string; SurName string; Active bool; Points01 struct { Assigned bool \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\"; Value int \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\" }; Points02 struct { Assigned bool \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\"; Value int \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\" }; Points03 struct { Assigned bool \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\"; Value int \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\" }; Points04 struct { Assigned bool \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\"; Value int \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\" } } [T1]\n"},
		{"Dictionary Test 01", true, "./work/dict0001.go", "select\n\t'' as Name,\n\t'' as SurName,\n\t'' as Status1,\n\t'' as Status2,\n\tcase\n\t\twhen (([T1].[Points01] is not null)) then\n\t\t\tcase\n\t\t\t\twhen (([T1].[Points01] = 1)) then\n\t\t\t\t\t/* Some[string](assigned: true) */\n\t\t\t\t\t'1'\n\t\t\t\twhen (([T1].[Points01] = 2)) then\n\t\t\t\t\t/* Some[string](assigned: false) */\n\t\t\t\t\tnil\n\t\t\t\twhen (([T1].[Points01] = 3)) then\n\t\t\t\t\t/* Some[string](assigned: true) */\n\t\t\t\t\t'3'\n\t\t\t\twhen (([T1].[Points01] = 4)) then\n\t\t\t\t\t/* Some[string](assigned: true) */\n\t\t\t\t\t'4'\n\t\t\t\twhen (([T1].[Points01] = 5)) then\n\t\t\t\t\t/* Some[string](assigned: true) */\n\t\t\t\t\t'5'\n\t\t\t\telse\n\t\t\t\t\t/* Some[string](assigned: false) */\n\t\t\t\t\tnil\n\t\t\tend\n\t\telse\n\t\t\t/* Some[string](assigned: false) */\n\t\t\tnil\n\tend as Level1,\n\tcase\n\t\twhen (([T1].[Points02] is not null)) then\n\t\t\tcase\n\t\t\t\twhen (([T1].[Points02] = 1)) then\n\t\t\t\t\t'11'\n\t\t\t\twhen (([T1].[Points02] = 2)) then\n\t\t\t\t\t'22'\n\t\t\t\twhen (([T1].[Points02] = 3)) then\n\t\t\t\t\t'33'\n\t\t\t\twhen (([T1].[Points02] = 4)) then\n\t\t\t\t\t'44'\n\t\t\t\twhen (([T1].[Points02] = 5)) then\n\t\t\t\t\t'55'\n\t\t\t\telse\n\t\t\t\t\t'99'\n\t\t\tend\n\t\telse\n\t\t\t'99'\n\tend as Level2,\n\t/* Some[builtin.IfThenElseSingleValueCondition](assigned: true) */\n\tcase\n\t\twhen (([T1].[Points03] is not null)) then\n\t\t\tcase\n\t\t\t\twhen (([T1].[Points03] = 1)) then\n\t\t\t\t\t'111'\n\t\t\t\twhen (([T1].[Points03] = 2)) then\n\t\t\t\t\t'222'\n\t\t\t\twhen (([T1].[Points03] = 3)) then\n\t\t\t\t\t'333'\n\t\t\t\twhen (([T1].[Points03] = 4)) then\n\t\t\t\t\t'444'\n\t\t\t\twhen (([T1].[Points03] = 5)) then\n\t\t\t\t\t'555'\n\t\t\t\telse\n\t\t\t\t\t'99'\n\t\t\tend\n\t\telse\n\t\t\t'99'\n\tend as Level3\nfrom\n\tstruct { Name string; SurName string; Active bool; Points01 struct { Assigned bool \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\"; Value int \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\" }; Points02 struct { Assigned bool \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\"; Value int \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\" }; Points03 struct { Assigned bool \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\"; Value int \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\" }; Points04 struct { Assigned bool \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\"; Value int \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\" } } [T1]\n"},
		{"Dictionary Test 02", true, "./work/dict0002.go", "select\n\tcase\n\t\twhen (([T1].[Points01] is not null)) then\n\t\t\tcase\n\t\t\t\twhen (([T1].[Points01] = 1)) then\n\t\t\t\t\t/* Some[string](assigned: true) */\n\t\t\t\t\t'1'\n\t\t\t\twhen (([T1].[Points01] = 2)) then\n\t\t\t\t\t/* Some[string](assigned: false) */\n\t\t\t\t\tnil\n\t\t\t\telse\n\t\t\t\t\t/* Some[string](assigned: false) */\n\t\t\t\t\tnil\n\t\t\tend\n\t\telse\n\t\t\t/* Some[string](assigned: false) */\n\t\t\tnil\n\tend as Level1,\nfrom\n\tstruct { Name string; SurName string; Active bool; Points01 struct { Assigned bool \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\"; Value int \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\" }; Points02 struct { Assigned bool \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\"; Value int \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\" }; Points03 struct { Assigned bool \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\"; Value int \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\" }; Points04 struct { Assigned bool \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\"; Value int \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\" } } [T1]\n"},
		{"Dictionary Test 03", true, "./work/dict0003.go", "select\n\tcase\n\t\twhen (([T1].[A] = 1) AND ([T1].[B] = 1)) then\n\t\t\t11\n\t\twhen (([T1].[A] = 1) AND ([T1].[B] = 2)) then\n\t\t\t12\n\t\twhen (([T1].[A] = 1) AND ([T1].[B] = 3)) then\n\t\t\t13\n\t\telse\n\t\t\t0\n\tend as A\nfrom\n\tstruct { A int; B int } [T1]\n"},
		{"Dictionary Test 04", true, "./work/dict0004.go", "select\n\tcase\n\t\twhen (([T1].[A] = 1) AND ([T1].[B] = 1)) then\n\t\t\t11\n\t\twhen (([T1].[A] = 1) AND ([T1].[B] = 2)) then\n\t\t\t12\n\t\twhen (([T1].[A] = 1) AND ([T1].[B] = 3)) then\n\t\t\t13\n\t\twhen (([T1].[A] = 1) AND ([T1].[B] = 4)) then\n\t\t\t11\n\t\twhen (([T1].[A] = 1) AND ([T1].[B] = 5)) then\n\t\t\t12\n\t\twhen (([T1].[A] = 1) AND ([T1].[B] = 6)) then\n\t\t\t13\n\t\twhen (([T1].[A] = 1) AND ([T1].[B] = 7)) then\n\t\t\t11\n\t\twhen (([T1].[A] = 1) AND ([T1].[B] = 8)) then\n\t\t\t12\n\t\twhen (([T1].[A] = 1) AND ([T1].[B] = 9)) then\n\t\t\t13\n\t\telse\n\t\t\t0\n\tend as A\nfrom\n\tstruct { A int; B int } [T1]\n"},
		{"Some 001", false, "./work/Some00001.go", ""},
		{"queryOption", false, "./work/queryOptions.go", ""},
		{"Relation 001", true, "./work/relationship0001.go", "select\n\t[T1].[Id] as Id,\n\t[T2].[MotherId] as MotherId,\n\t[T3].[Name] as Name,\nfrom\n\tstruct { Id int; MotherId struct { Assigned bool \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\"; Value int \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\" }; FatherId struct { Assigned bool \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\"; Value int \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\" }; Name string; Surname string } [T1]\ninner join\n\tstruct { Id int; MotherId struct { Assigned bool \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\"; Value int \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\" }; FatherId struct { Assigned bool \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\"; Value int \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\" }; Name string; Surname string } [T2]\n\ton\n\t\t-- BooleanCondition OR \n\t\t(\n\t\t\t-- internal.MultiBinaryExpr\n\t\t\t((([T1].[MotherId] is not null) AND ([T1].[FatherId] is not null) AND ([T2].[MotherId] is not null) AND ([T2].[FatherId] is not null)) AND (([T1].[MotherId] = [T2].[MotherId]) AND ([T1].[FatherId] = [T2].[FatherId])))\n\t\t OR \n\t\t\t-- internal.MultiBinaryExpr\n\t\t\t((([T2].[MotherId] is not null)) AND ([T2].[Surname] = 'Spijkerman'))\n\t\t OR \n\t\t\t-- internal.MultiBinaryExpr\n\t\t\t((([T2].[FatherId] is not null)) AND ([T2].[Surname] = 'Bosman'))\n\t\t)\ninner join\n\tstruct { Id int; MotherId struct { Assigned bool \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\"; Value int \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\" }; FatherId struct { Assigned bool \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\"; Value int \"Type:\\\"__built_in_Some_Type__\\\" TData:\\\"int\\\"\" }; Name string; Surname string } [T3]\n\ton\n\t\t-- BooleanCondition OR \n\t\t(\n\t\t\t-- internal.MultiBinaryExpr\n\t\t\t((([T3].[MotherId] is not null)) AND ([T3].[MotherId] = [T2].[Id]))\n\t\t)\n"},
		{"Relation 002", false, "./work/relationship0002.go", ""},
		{"OptionalRelationship 001", false, "./work/optionalRelationship.go", ""},
	}
	for _, s := range ss {
		t.Run(
			s.testName,
			func(t *testing.T) {
				cmd.RootCmd.SetArgs([]string{s.fileName})
				sb := new(strings.Builder)
				cmd.RootCmd.SetOut(sb)

				err := cmd.RootCmd.Execute()
				if err != nil {
					os.Exit(1)
				}
				if s.setout {
					require.Equal(t, s.result, sb.String())
				} else {
					println(sb.String())
				}
			},
		)
	}
}
